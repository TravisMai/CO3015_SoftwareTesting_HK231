# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestPassingGrade():
  def setup_method(self, method):
    firefox_options = webdriver.FirefoxOptions()
    firefox_options.add_argument("--private-window")
    self.driver = webdriver.Firefox(options=firefox_options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  

  @pytest.mark.parametrize("assignment_name, passing_grade", [
        ("assingment e", ""),
        ("assingment 0", "0"),
        ("assingment 1", "1"),
        ("assingment 50", "50"),
        ("assingment 99", "99"),
        ("assingment 100", "100"),
        ("assingment 0.1", "0.1"),
        ("assingment -1", "-1"),
        ("assingment 101", "101")
  ])
  def test_passingGrade(self, assignment_name, passing_grade):
    # Test name: test_passingGrade
    # Step # | name | target | value
    # 1 | open | https://school.moodledemo.net/ | 
    self.driver.get("https://school.moodledemo.net/")
    # 2 | click | css=.login > a | 
    self.driver.find_element(By.CSS_SELECTOR, ".login > a").click()
    # 3 | type | id=username | teacher
    self.driver.find_element(By.ID, "username").send_keys("teacher")
    # 4 | type | id=password | moodle
    self.driver.find_element(By.ID, "password").send_keys("moodle")
    # 5 | click | id=loginbtn | 
    self.driver.find_element(By.ID, "loginbtn").click()
    # 6 | waitForElementClickable | css=.card:nth-child(9) .card-img | 30000
    WebDriverWait(self.driver, 30).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, ".card:nth-child(9) .card-img")))
    # 7 | runScript | window.scrollTo(0,0.5) | 30000
    self.driver.execute_script("window.scrollTo(0,0.5)")
    # 8 | click | css=.card:nth-child(9) .card-img | 
    self.driver.find_element(By.CSS_SELECTOR, ".card:nth-child(9) .card-img").click()
    # 9 | click | name=setmode | 
    self.driver.find_element(By.NAME, "setmode").click()
    # 10 | waitForElementPresent | css=#coursecontentcollapse0 .activity-add-text | 30000
    WebDriverWait(self.driver, 30).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "#coursecontentcollapse0 .activity-add-text")))
    # 11 | click | css=#coursecontentcollapse0 .activity-add-text | 
    self.driver.find_element(By.CSS_SELECTOR, "#coursecontentcollapse0 .activity-add-text").click()
    # 12 | waitForElementPresent | linkText=Assignment | 30000
    WebDriverWait(self.driver, 30).until(expected_conditions.element_to_be_clickable((By.LINK_TEXT, "Assignment")))
    # 13 | click | linkText=Assignment | 
    self.driver.find_element(By.LINK_TEXT, "Assignment").click()
    # 14 | type | id=id_name | Assignment 1
    self.driver.find_element(By.ID, "id_name").send_keys(assignment_name)

    # 15 | click | id=collapseElement-7 | 
    # Check if the user menu is already open
    is_user_menu_open = self.driver.find_element(By.ID, "collapseElement-7").get_attribute("aria-expanded") == "true"
    # Click the toggle only if it's not open
    if not is_user_menu_open:
        self.driver.find_element(By.ID, "collapseElement-7").click()
    # 16 | type | id=id_gradepass | 5
    self.driver.find_element(By.ID, "id_gradepass").send_keys(passing_grade)

    # 17 | click | id=collapseElement-10 | 
    # Check if the user menu is already open
    is_user_menu_open = self.driver.find_element(By.ID, "collapseElement-10").get_attribute("aria-expanded") == "true"
    # Click the toggle only if it's not open
    if not is_user_menu_open:
        self.driver.find_element(By.ID, "collapseElement-10").click()
    # 18 | click | id=id_completion_2 | 
    self.driver.find_element(By.ID, "id_completion_2").click()
    # 19 | click | id=id_completionusegrade | 
    self.driver.find_element(By.ID, "id_completionusegrade").click()
    # 20 | click | id=id_completionpassgrade_1 | 
    self.driver.find_element(By.ID, "id_completionpassgrade_1").click()

    # 21 | click | id=id_submitbutton | 
    self.driver.find_element(By.ID, "id_submitbutton").click()

    # 22 | assertErrorNotDisplayed
    elements = self.driver.find_elements(By.ID, "id_error_completionpassgrade_1")
    assert len(elements) == 0, "Error in setting passing grade"
    elements = self.driver.find_elements(By.ID, "id_error_gradepass")
    assert len(elements) == 0, "Error in setting passing grade"

    # 23 | waitForElementVisible | css=#carousel-item-main > .dropdown-item:nth-child(12) | 30000
    WebDriverWait(self.driver, 30).until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "#carousel-item-main > .dropdown-item:nth-child(12)")))
    # 24 | click | css=#carousel-item-main > .dropdown-item:nth-child(12) | 
    self.driver.find_element(By.CSS_SELECTOR, "#carousel-item-main > .dropdown-item:nth-child(12)").click()
  
if __name__ == "__main__":
  pytest.main()